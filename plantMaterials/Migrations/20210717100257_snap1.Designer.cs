// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using plantMaterials.Models;

namespace plantMaterials.Migrations
{
    [DbContext(typeof(PlantMaterialsContext))]
    [Migration("20210717100257_snap1")]
    partial class snap1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("plantMaterials.Models.Analysis", b =>
                {
                    b.Property<Guid>("AnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("analysis_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<DateTime?>("AnalysisDate")
                        .HasColumnType("datetime")
                        .HasColumnName("analysis_date");

                    b.Property<string>("AnalysisDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("analysis_description");

                    b.Property<Guid>("AnalysisTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("analysis_type_id");

                    b.Property<Guid?>("PrepId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("prep_id");

                    b.HasKey("AnalysisId")
                        .HasName("analyses_pk")
                        .IsClustered(false);

                    b.HasIndex("AnalysisTypeId");

                    b.HasIndex("PrepId");

                    b.HasIndex(new[] { "AnalysisId" }, "analyses_analysis_id_uindex")
                        .IsUnique();

                    b.ToTable("analyses");
                });

            modelBuilder.Entity("plantMaterials.Models.AnalysisType", b =>
                {
                    b.Property<Guid>("AnalysisTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("analysis_type_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("AnalysisDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("analysis_description");

                    b.Property<string>("AnalysisTypeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("analysis_type_name");

                    b.HasKey("AnalysisTypeId")
                        .HasName("analysis_types_pk")
                        .IsClustered(false);

                    b.HasIndex(new[] { "AnalysisTypeId" }, "analysis_types_analysis_type_id_uindex")
                        .IsUnique();

                    b.ToTable("analysis_types");
                });

            modelBuilder.Entity("plantMaterials.Models.ContainerType", b =>
                {
                    b.Property<Guid>("ContainerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("container_type_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("ContainerDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("container_description");

                    b.Property<string>("ContainerTypeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("container_type_name");

                    b.HasKey("ContainerTypeId")
                        .HasName("container_types_pk")
                        .IsClustered(false);

                    b.HasIndex(new[] { "ContainerTypeId" }, "container_types_container_type_id_uindex")
                        .IsUnique();

                    b.ToTable("container_types");
                });

            modelBuilder.Entity("plantMaterials.Models.Duplication", b =>
                {
                    b.Property<Guid>("DuplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("duplication_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<short?>("DuplicationName")
                        .HasColumnType("smallint")
                        .HasColumnName("duplication_name");

                    b.HasKey("DuplicationId")
                        .HasName("duplications_pk")
                        .IsClustered(false);

                    b.HasIndex(new[] { "DuplicationId" }, "duplications_duplication_id_uindex")
                        .IsUnique();

                    b.ToTable("duplications");
                });

            modelBuilder.Entity("plantMaterials.Models.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("location_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("ContainerTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("container_type_id");

                    b.Property<string>("LocationDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location_description");

                    b.Property<string>("LocationName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("location_name");

                    b.Property<Guid?>("LocationTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("location_type_id");

                    b.Property<Guid?>("ShelfPositionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("shelf_position_id");

                    b.HasKey("LocationId")
                        .HasName("locations_pk")
                        .IsClustered(false);

                    b.HasIndex("ContainerTypeId");

                    b.HasIndex("LocationTypeId");

                    b.HasIndex("ShelfPositionId");

                    b.HasIndex(new[] { "LocationId" }, "locations_location_id_uindex")
                        .IsUnique();

                    b.ToTable("locations");
                });

            modelBuilder.Entity("plantMaterials.Models.LocationType", b =>
                {
                    b.Property<Guid>("LocationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("location_type_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("LocationTypeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("location_type_name");

                    b.HasKey("LocationTypeId")
                        .HasName("location_types_pk")
                        .IsClustered(false);

                    b.HasIndex(new[] { "LocationTypeId" }, "location_types_location_type_id_uindex")
                        .IsUnique();

                    b.ToTable("location_types");
                });

            modelBuilder.Entity("plantMaterials.Models.Phenotype", b =>
                {
                    b.Property<Guid>("PhenotypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("phenotype_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("PhenotypeDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phenotype_description");

                    b.Property<string>("PhenotypeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("phenotype_name");

                    b.HasKey("PhenotypeId")
                        .HasName("phenotypes_pk")
                        .IsClustered(false);

                    b.HasIndex(new[] { "PhenotypeId" }, "phenotypes_phenotype_id_uindex")
                        .IsUnique();

                    b.ToTable("phenotypes");
                });

            modelBuilder.Entity("plantMaterials.Models.PlantSample", b =>
                {
                    b.Property<Guid>("PlantSampleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("plant_sample_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<DateTime?>("CollectionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("collection_date");

                    b.Property<Guid?>("DuplicationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("duplication_id");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("location_id");

                    b.Property<Guid?>("PhenotypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("phenotype_id");

                    b.Property<string>("PlantSampleDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("plant_sample_description");

                    b.Property<Guid?>("PopulationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("population_id");

                    b.Property<string>("SampleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("sample_name");

                    b.Property<Guid?>("SampleWeightId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("sample_weight_id");

                    b.Property<Guid?>("TissueId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tissue_id");

                    b.HasKey("PlantSampleId")
                        .HasName("plant_samples_pk")
                        .IsClustered(false);

                    b.HasIndex("DuplicationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PhenotypeId");

                    b.HasIndex("PopulationId");

                    b.HasIndex("SampleWeightId");

                    b.HasIndex("TissueId");

                    b.HasIndex(new[] { "PlantSampleId" }, "plant_samples_plant_sample_id_uindex")
                        .IsUnique();

                    b.ToTable("plant_samples");
                });

            modelBuilder.Entity("plantMaterials.Models.Population", b =>
                {
                    b.Property<Guid>("PopulationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("population_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("PopulationDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("population_description");

                    b.Property<string>("PopulationName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("population_name");

                    b.Property<Guid?>("SpeciesId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("species_id");

                    b.HasKey("PopulationId")
                        .HasName("populations_pk")
                        .IsClustered(false);

                    b.HasIndex("SpeciesId");

                    b.HasIndex(new[] { "PopulationId" }, "populations_population_id_uindex")
                        .IsUnique();

                    b.ToTable("populations");
                });

            modelBuilder.Entity("plantMaterials.Models.Prep", b =>
                {
                    b.Property<Guid>("PrepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("prep_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<Guid?>("PlantSampleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("plant_sample_id");

                    b.Property<string>("PrepDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("prep_description");

                    b.Property<Guid?>("PrepLocationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("prep_location_id");

                    b.Property<string>("PrepName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("prep_name");

                    b.Property<Guid?>("PrepTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("prep_type_id");

                    b.Property<int?>("VolumeUl")
                        .HasColumnType("int")
                        .HasColumnName("volume_ul");

                    b.HasKey("PrepId")
                        .HasName("preps_pk_2")
                        .IsClustered(false);

                    b.HasIndex("PlantSampleId");

                    b.HasIndex("PrepLocationId");

                    b.HasIndex("PrepTypeId");

                    b.HasIndex(new[] { "PrepId" }, "preps_prep_id_uindex_2")
                        .IsUnique();

                    b.ToTable("preps");
                });

            modelBuilder.Entity("plantMaterials.Models.PrepType", b =>
                {
                    b.Property<Guid>("PrepTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("prep_type_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("PrepDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("prep_description");

                    b.Property<string>("PrepTypeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("prep_type_name");

                    b.HasKey("PrepTypeId")
                        .HasName("preps_pk")
                        .IsClustered(false);

                    b.HasIndex(new[] { "PrepTypeId" }, "preps_prep_id_uindex")
                        .IsUnique();

                    b.ToTable("prep_types");
                });

            modelBuilder.Entity("plantMaterials.Models.SampleWeight", b =>
                {
                    b.Property<Guid>("WeightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("weight_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("WeightDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("weight_description");

                    b.Property<string>("WeightName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("weight_name");

                    b.HasKey("WeightId")
                        .HasName("amounts_pk")
                        .IsClustered(false);

                    b.HasIndex(new[] { "WeightId" }, "amounts_amount_id_uindex")
                        .IsUnique();

                    b.ToTable("sample_weights");
                });

            modelBuilder.Entity("plantMaterials.Models.ShelfPosition", b =>
                {
                    b.Property<Guid>("ShelfPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("shelf_position_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<short?>("ShelfPositionName")
                        .HasColumnType("smallint")
                        .HasColumnName("shelf_position_name");

                    b.HasKey("ShelfPositionId")
                        .HasName("shelf_positions_pk")
                        .IsClustered(false);

                    b.HasIndex(new[] { "ShelfPositionId" }, "shelf_positions_shelf_position_id_uindex")
                        .IsUnique();

                    b.ToTable("shelf_positions");
                });

            modelBuilder.Entity("plantMaterials.Models.Species", b =>
                {
                    b.Property<Guid>("SpeciesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("species_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("SpeciesDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("species_description");

                    b.Property<string>("SpeciesName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("species_name");

                    b.HasKey("SpeciesId")
                        .HasName("species_pk")
                        .IsClustered(false);

                    b.HasIndex(new[] { "SpeciesId" }, "species_species_id_uindex")
                        .IsUnique();

                    b.ToTable("species");
                });

            modelBuilder.Entity("plantMaterials.Models.SpeciesAlias", b =>
                {
                    b.Property<Guid>("SpeciesAliasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("species_alias_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Alias")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("alias");

                    b.Property<Guid?>("SpeciesId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("species_id");

                    b.HasKey("SpeciesAliasId")
                        .HasName("species_aliases_pk")
                        .IsClustered(false);

                    b.HasIndex("SpeciesId");

                    b.HasIndex(new[] { "SpeciesAliasId" }, "species_aliases_species_alias_id_uindex")
                        .IsUnique();

                    b.ToTable("species_aliases");
                });

            modelBuilder.Entity("plantMaterials.Models.Tissue", b =>
                {
                    b.Property<Guid>("TissueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tissue_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("TissueDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tissue_description");

                    b.Property<string>("TissueName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("tissue_name");

                    b.HasKey("TissueId")
                        .HasName("tissues_pk")
                        .IsClustered(false);

                    b.HasIndex(new[] { "TissueId" }, "tissues_tissue_id_uindex")
                        .IsUnique();

                    b.ToTable("tissues");
                });

            modelBuilder.Entity("plantMaterials.Models.Analysis", b =>
                {
                    b.HasOne("plantMaterials.Models.AnalysisType", "AnalysisType")
                        .WithMany("Analyses")
                        .HasForeignKey("AnalysisTypeId")
                        .HasConstraintName("analyses_analysis_type__fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("plantMaterials.Models.Prep", "Prep")
                        .WithMany("Analyses")
                        .HasForeignKey("PrepId")
                        .HasConstraintName("analyses_prep__fk")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AnalysisType");

                    b.Navigation("Prep");
                });

            modelBuilder.Entity("plantMaterials.Models.Location", b =>
                {
                    b.HasOne("plantMaterials.Models.ContainerType", "ContainerType")
                        .WithMany("Locations")
                        .HasForeignKey("ContainerTypeId")
                        .HasConstraintName("locations_container__fk")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("plantMaterials.Models.LocationType", "LocationType")
                        .WithMany("Locations")
                        .HasForeignKey("LocationTypeId")
                        .HasConstraintName("locations_type__fk")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("plantMaterials.Models.ShelfPosition", "ShelfPosition")
                        .WithMany("Locations")
                        .HasForeignKey("ShelfPositionId")
                        .HasConstraintName("locations_position__fk")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ContainerType");

                    b.Navigation("LocationType");

                    b.Navigation("ShelfPosition");
                });

            modelBuilder.Entity("plantMaterials.Models.PlantSample", b =>
                {
                    b.HasOne("plantMaterials.Models.Duplication", "Duplication")
                        .WithMany("PlantSamples")
                        .HasForeignKey("DuplicationId")
                        .HasConstraintName("plant_samples_duplication__fk")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("plantMaterials.Models.Location", "Location")
                        .WithMany("PlantSamples")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("plant_samples_location__fk");

                    b.HasOne("plantMaterials.Models.Phenotype", "Phenotype")
                        .WithMany("PlantSamples")
                        .HasForeignKey("PhenotypeId")
                        .HasConstraintName("plant_samples_phenotype__fk");

                    b.HasOne("plantMaterials.Models.Population", "Population")
                        .WithMany("PlantSamples")
                        .HasForeignKey("PopulationId")
                        .HasConstraintName("plant_samples_population__fk")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("plantMaterials.Models.SampleWeight", "SampleWeight")
                        .WithMany("PlantSamples")
                        .HasForeignKey("SampleWeightId")
                        .HasConstraintName("plant_samples_weight__fk");

                    b.HasOne("plantMaterials.Models.Tissue", "Tissue")
                        .WithMany("PlantSamples")
                        .HasForeignKey("TissueId")
                        .HasConstraintName("plant_samples_tissue__fk")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Duplication");

                    b.Navigation("Location");

                    b.Navigation("Phenotype");

                    b.Navigation("Population");

                    b.Navigation("SampleWeight");

                    b.Navigation("Tissue");
                });

            modelBuilder.Entity("plantMaterials.Models.Population", b =>
                {
                    b.HasOne("plantMaterials.Models.Species", "Species")
                        .WithMany("Populations")
                        .HasForeignKey("SpeciesId")
                        .HasConstraintName("populations_species__fk")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Species");
                });

            modelBuilder.Entity("plantMaterials.Models.Prep", b =>
                {
                    b.HasOne("plantMaterials.Models.PlantSample", "PlantSample")
                        .WithMany("Preps")
                        .HasForeignKey("PlantSampleId")
                        .HasConstraintName("preps_plant_sample__fk")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("plantMaterials.Models.Location", "PrepLocation")
                        .WithMany("Preps")
                        .HasForeignKey("PrepLocationId")
                        .HasConstraintName("preps_location__fk");

                    b.HasOne("plantMaterials.Models.PrepType", "PrepType")
                        .WithMany("Preps")
                        .HasForeignKey("PrepTypeId")
                        .HasConstraintName("preps_type__fk")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("PlantSample");

                    b.Navigation("PrepLocation");

                    b.Navigation("PrepType");
                });

            modelBuilder.Entity("plantMaterials.Models.SpeciesAlias", b =>
                {
                    b.HasOne("plantMaterials.Models.Species", "Species")
                        .WithMany("SpeciesAliases")
                        .HasForeignKey("SpeciesId")
                        .HasConstraintName("species_aliases_species__fk")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Species");
                });

            modelBuilder.Entity("plantMaterials.Models.AnalysisType", b =>
                {
                    b.Navigation("Analyses");
                });

            modelBuilder.Entity("plantMaterials.Models.ContainerType", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("plantMaterials.Models.Duplication", b =>
                {
                    b.Navigation("PlantSamples");
                });

            modelBuilder.Entity("plantMaterials.Models.Location", b =>
                {
                    b.Navigation("PlantSamples");

                    b.Navigation("Preps");
                });

            modelBuilder.Entity("plantMaterials.Models.LocationType", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("plantMaterials.Models.Phenotype", b =>
                {
                    b.Navigation("PlantSamples");
                });

            modelBuilder.Entity("plantMaterials.Models.PlantSample", b =>
                {
                    b.Navigation("Preps");
                });

            modelBuilder.Entity("plantMaterials.Models.Population", b =>
                {
                    b.Navigation("PlantSamples");
                });

            modelBuilder.Entity("plantMaterials.Models.Prep", b =>
                {
                    b.Navigation("Analyses");
                });

            modelBuilder.Entity("plantMaterials.Models.PrepType", b =>
                {
                    b.Navigation("Preps");
                });

            modelBuilder.Entity("plantMaterials.Models.SampleWeight", b =>
                {
                    b.Navigation("PlantSamples");
                });

            modelBuilder.Entity("plantMaterials.Models.ShelfPosition", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("plantMaterials.Models.Species", b =>
                {
                    b.Navigation("Populations");

                    b.Navigation("SpeciesAliases");
                });

            modelBuilder.Entity("plantMaterials.Models.Tissue", b =>
                {
                    b.Navigation("PlantSamples");
                });
#pragma warning restore 612, 618
        }
    }
}
